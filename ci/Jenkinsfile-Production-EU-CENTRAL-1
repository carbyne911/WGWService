@Library('devops-jenkins-lib') _
stageCredentialsId = 'dab6216e-af1e-45e8-b957-58796cc47fa2'
prodCredentialsId = 'aws-credentials-production'
codeDeployS3Bucket = 'carbyne-wgw-service-releases-prod'
imageName = 'wgw_service'


pipeline {
    options {
        timestamps()
        disableConcurrentBuilds()
        skipDefaultCheckout()
        timeout(time: 2, unit: 'HOURS')
    }
    agent {
        kubernetes {
            cloud 'jenkins'
            yamlFile 'ci/pod.yaml'
        }
    }
    parameters {
        string(name: 'WGW_VERSION', defaultValue: 'X.Y.Z', description: 'Put app version here. Must fill manually.')
    }
    environment {
        AWS_DEFAULT_REGION = 'eu-central-1'
        SERVICE_NAME = 'WGWService'
        STACK = 'prod'
        CODE_DEPLOY_STACK = 'Production'
    }
    stages {
	stage('Pull stage image from ECR') {
            steps {
                script {
                    utils.pullDockerImageProd(
                            ecrRepo: '366789379256.dkr.ecr.eu-west-1.amazonaws.com',
			    ecrRepoProd: '924197678267.dkr.ecr.eu-west-1.amazonaws.com',
                            imageName:"${imageName}_stage",
			    imageNameVersion:"${imageName}_stage:${WGW_VERSION}",
                            dockerCredentialsId: 'ecr:eu-west-1:dab6216e-af1e-45e8-b957-58796cc47fa2',
                            

                    )
                }
            }
        }
	stage('Push stage image to ECR Prod') {
            steps {
                script {
                    utils.pushDockerImageProd(
                            ecrRepo: '366789379256.dkr.ecr.eu-west-1.amazonaws.com',
			    ecrRepoProd: '924197678267.dkr.ecr.eu-west-1.amazonaws.com',
                            imageName:"${imageName}",
			    imageNameVersion:"${imageName}:${WGW_VERSION}",
                            dockerCredentialsId: 'ecr:eu-west-1:aws-credentials-production',
                            

                    )
                }
            }
        }
}
}
